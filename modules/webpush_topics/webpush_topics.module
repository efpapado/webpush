<?php

/**
 * Implements hook_block_info().
 */
function webpush_topics_block_info() {
  $blocks = [];
  $blocks['webpush_user_panel'] = [
    'info' => t('Webpush user panel'),
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webpush_topics_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'webpush_user_panel' :

      $block['content'] = [
        'message' => ['#markup' => theme('webpush_topics_user_panel', _webpush_topics_block_variables())],

        '#attached' => [
          'css' => [
            drupal_get_path('module', 'webpush_topics') . '/css/user_panel.css',
          ],
          'js' => [
            [
              'type' => 'setting',
              'data' => ['webpush' => ['topics_button_id' => 'webpush-topics-subscribe']],
            ],
            [
              'data' => drupal_get_path('module', 'webpush_topics') . '/js/user_panel.js',
              'type' => 'file',
            ],
          ],
        ],

      ];

      break;
  }

  return $block;
}

function _webpush_topics_block_variables() {
  $variables = [];

  $topics = _webpush_topics_get_topics();
  $variables['topics'] = $topics;

  return $variables;
}

function _webpush_topics_get_topics() {
  $topics = [];
  $topics['all'] = t('All');
  $vocabulary = taxonomy_vocabulary_machine_name_load('webpush_topics');
  $terms = entity_load('taxonomy_term', FALSE, ['vid' => $vocabulary->vid]);
  foreach ($terms as $tid => $term) {
    $topics[$tid] = $term->name;
  }
  return $topics;
}

/**
 * Implements hook_theme().
 */
function webpush_topics_theme($existing, $type, $theme, $path) {
  return [
    'webpush_topics_user_panel' => [
      'template' => 'webpush-topics--user-panel',
      'variables' => [
        'topics' => NULL,
      ],
    ],
  ];

}

/**
 * Alter the incoming data.
 *
 * If 'webpush_topics' has the "all" value selected, we unset this value, to
 * indicate that this subscription should cover all topics (even the ones that
 * will be created in the future!)
 *
 * @param $data
 */
function webpush_topics_webpush_create_subscription_alter(&$data) {
  _webpush_topics_handle_all_topics($data);
}

/**
 * Alter the incoming data.
 *
 * If 'webpush_topics' has the "all" value selected, we unset this value, to
 * indicate that this subscription should cover all topics (even the ones that
 * will be created in the future!)
 *
 * @param $data
 */
function webpush_topics_webpush_update_subscription_alter(&$data) {
  _webpush_topics_handle_all_topics($data);
}

function _webpush_topics_handle_all_topics(&$data) {
  if (isset($data['webpush_topics'])) {
    if (in_array('all', $data['webpush_topics'])) {
      unset($data['webpush_topics']);
    }
  }
}

function webpush_topics_webpush_return_subscription_data_alter(&$return_data, $entity) {
  try {
    $topics_tids = [];
    $entity_wrapper = entity_metadata_wrapper('webpush_subscription', $entity);
    $topics = $entity_wrapper->webpush_topics->value();
    if (!empty($topics)) {
      foreach ($topics as $item) {
        $topics_tids[] = $item->tid;
      }
    }
    $return_data['webpush_topics'] = $topics_tids;
  } catch (EntityMetadataWrapperException $e) {
    watchdog(
      'webpush',
      $e->getMessage() . '<br>See ' . __FUNCTION__ . '():' . __LINE__ . ' <pre>!trace</pre>',
      ['!trace' => $e->getTraceAsString()],
      WATCHDOG_ERROR
    );
  }
}
