<?php

/**
 *
 * Things left todo:
 *
 *
 * - Implement user control panel for topics
 *    - Alter send form handler
 *
 * - Fix: notifications listing page, default view does not work
 *
 * - Notification entity: store total and successfull deliveries
 *
 *
 * - At least one topic should exist
 */


/**
 * Implements hook_menu().
 */
function webpush_menu() {
  $items = [];

  $items['webpush/serviceworker/js'] = [
    'page callback' => 'webpush_serviceworker_file_data',
    'access arguments' => ['register webpush'],
    'access callback' => TRUE,
    'delivery callback' => 'webpush_deliver_js_file',
    'file' => 'webpush.pages.inc',
    'type' => MENU_CALLBACK,
  ];

  $items['webpush/subscription-registration'] = [
    'type' => MENU_CALLBACK,
    'page callback' => 'webpush_subscription_registration_callback',
    'access arguments' => ['register webpush'],
    'access callback' => TRUE,
  ];

  $items['admin/config/services/webpush'] = [
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Webpush',
    'description' => 'Webpush settings.',
    'access arguments' => ['send push notifications'],
    'file' => 'webpush.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['webpush_admin_send_form'],
  ];

  $items['admin/config/services/webpush/send'] = [
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Send notification',
    'description' => 'Send ush notifications to subscribed users.',
    'weight' => -100,
    'access arguments' => ['send push notifications'],
    'file' => 'webpush.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['webpush_admin_send_form'],
  ];

  $items['admin/config/services/webpush/configure'] = [
    'type' => MENU_LOCAL_TASK,
    'title' => 'Configuration',
    'description' => 'Webpush settings.',
    'access arguments' => ['administer webpush'],
    'file' => 'webpush.admin.inc',
    'weight' => 100,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['webpush_admin_configuration_form'],
  ];

  $items['webpush/autocomplete-node'] = [
    'page callback' => 'webpush_autocomplete_node_callback',
    'type' => MENU_CALLBACK,
    'file' => 'webpush.admin.inc',
    'access arguments' => ['send push notifications'],
  ];


  // Items related to WebPush Subscription entity.
  $items['admin/structure/webpush-subscription/manage'] = [
    'title' => 'WebPush subscriptions',
    'page callback' => 'webpush_subscription__overview',
    'file' => 'includes/webpush_subscription.inc',
    'access arguments' => ['administer webpush'],
  ];

  $items['admin/structure/webpush-subscription/manage/list'] = [
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => ['send push notifications'],
  ];


  // Items related to WebPush Notification entity.
  $items['admin/structure/webpush-notification/manage'] = [
    'title' => 'WebPush notifications',
    'page callback' => 'webpush_notification__overview',
    'file' => 'includes/webpush_notification.inc',
    'access arguments' => ['administer webpush'],
  ];

  $items['admin/structure/webpush-notification/manage/list'] = [
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => ['send push notifications'],
  ];


  return $items;
}

/**
 * Implements hook_permission().
 */
function webpush_permission() {
  return [
    'register webpush' => [
      'title' => t('Register webpush'),
      'description' => t('Register for receiving push notifications.'),
    ],
    'administer webpush' => [
      'title' => t('Administer webpush'),
      'description' => t('Set configuration options for webpush.'),
    ],
    'send push notifications' => [
      'title' => t('Send push notifications'),
      'description' => t('Allows the user to send push notifications.'),
    ],
  ];

}

function webpush_is_enabled() {
  return variable_get('webpush_public_key', FALSE) && variable_get('webpush_private_key', FALSE);
}

/**
 * Implements hook_preprocess_html().
 */
function webpush_preprocess_html(&$variables) {
  if (!webpush_is_enabled() || !user_access('register webpush')) {
    return;
  }

  // Let js know about all the active properties.
  drupal_add_js(['webpush' => ['properties' => webpush_get_properties()]], ['type' => 'setting']);

  // Let js know about all the active buttons.
  drupal_add_js(['webpush' => ['buttons' => webpush_get_buttons()]], ['type' => 'setting']);

  // Load the app script.
  drupal_add_js(drupal_get_path('module', 'webpush') . '/js/app.js', 'file');

  // Load the service worker.
  drupal_add_js(['webpush' => ['path' => url('/webpush/serviceworker/js')]], 'setting');

  // Send the public key to js.
  drupal_add_js(['webpush' => ['applicationServerKey' => variable_get('webpush_public_key', FALSE)]], ['type' => 'setting']);
}


/**
 * Implements hook_block_info().
 */
function webpush_block_info() {
  $blocks = [];
  $blocks['simple_button'] = [
    'info' => t('Webpush simple button'),
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webpush_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'simple_button' :
      $block['content'] = _webpush_block_build();
      break;
  }

  return $block;
}

function _webpush_block_build() {
  $block = [
    'message' => [
      '#type' => 'markup',
      '#markup' => '<div id="webpush-simple-sub-button"><span id="webpush-subscription-message"></span></div>',
      '#suffix' => '',
    ],

    '#attached' => [
      'css' => [
        drupal_get_path('module', 'webpush') . '/css/simple_button.css',
      ],

      'js' => [
//        [
//          'type' => 'setting',
//          'data' => ['webpush' => ['simple_button_id' => 'webpush-simple-sub-button']],
//        ],
        [
          'data' => drupal_get_path('module', 'webpush') . '/js/simple_button.js',
          'type' => 'file',
        ],
      ],
    ],

  ];
  return $block;
}

function webpush_get_properties() {
  $result = [];
  foreach (module_implements('webpush_properties_info') as $module) {
    $module_result = module_invoke($module, 'webpush_properties_info');
    $result = array_merge($result, $module_result);
  }
  return $result;
}

function webpush_get_buttons() {
  $result = [];
  foreach (module_implements('webpush_buttons_info') as $module) {
    $module_result = module_invoke($module, 'webpush_buttons_info');
    $result = array_merge($result, $module_result);
  }
  return $result;
}

function webpush_webpush_buttons_info() {
  return [
    'simple_button_id' => 'webpush-simple-sub-button'
  ];
}


function webpush_subscription_registration_callback() {
  $subscription_input = json_decode(file_get_contents('php://input'), TRUE);
  $subscription = $subscription_input ?
    Minishlink\WebPush\Subscription::create([
      'endpoint' => $subscription_input['endpoint'],
      'authToken' => $subscription_input['authToken'],
      'publicKey' => $subscription_input['publicKey'],
      'contentEncoding' => $subscription_input['contentEncoding'],
    ]) :
    FALSE;
  $data = $subscription_input['data'] ?? FALSE;

  $entity = FALSE;
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'POST':
    case 'PUT':
      $entity = webpush_register($subscription, $data);
      break;

    case 'DELETE':
      $entity = webpush_unregister($subscription);
      break;

    case 'GET':
      if ($subscription) {
        $entity = webpush_register__retrieve_entity($subscription);
      }
      break;

    default:
      break;
  }

  if (is_object($entity)) {
    list($id, $vid, $bundle) = entity_extract_ids('webpush_subscription', $entity);

    $return_data = [];
    // Give an opportunity to other modules to alter the outgoing data before we
    // json serialize them.
    drupal_alter('webpush_return_subscription_data', $return_data, $entity);

    drupal_json_output([
      'webpush' => [
        'entity_id' => $id,
        'data' => $return_data,
      ],
    ]);
    drupal_exit();
  }
  else {
    drupal_json_output(FALSE);
    drupal_exit();
  }
  return;
}

/**
 * Callback function for registering a new subscription.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @param $data
 *
 */
function webpush_register(Minishlink\WebPush\Subscription $subscription, $data = FALSE) {
  $entity = webpush_register__retrieve_entity($subscription);
  // Is there an entity hosting this subscription?
  if ($entity) {
    // Yes, so update it.
    $entity = webpush_register__update_entity($subscription, $data, $entity);
  }
  else {
    // No, so create one..
    $entity = webpush_register__create_entity($subscription, $data);
  }
  return $entity;
}

/**
 * Callback function for deleting a subscription.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 */
function webpush_unregister(Minishlink\WebPush\Subscription $subscription) {
  webpush_register__delete_entity($subscription);
}

function webpush_register__update_entity(Minishlink\WebPush\Subscription $subscription, $data = FALSE, WebpushSubscription $entity) {
  $serialized = serialize($subscription);

  try {
    $entity_wrapper = entity_metadata_wrapper('webpush_subscription', $entity);
    $entity_wrapper->subscription->set($serialized);
    if (is_array($data)) {

      // Give an opportunity to other modules to alter the incoming data before we
      // assign the values to fields.
      drupal_alter('webpush_update_subscription', $data);

      // Just for safety reasons, because the drupal_alter might have unset all
      // the fields.
      if (!empty($data)) {
        foreach ($data as $field => $values) {
          $entity_wrapper->$field->set($values);
        }
      }
    }
    $entity_wrapper->save();
  } catch (EntityMetadataWrapperException $e) {
    watchdog(
      'webpush',
      $e->getMessage() . '<br>See ' . __FUNCTION__ . '():' . __LINE__ . ' <pre>!trace</pre>',
      ['!trace' => $e->getTraceAsString()],
      WATCHDOG_ERROR
    );
    return FALSE;
  }

  return $entity_wrapper->value();
}

/**
 * Creates a new webpush_subscription entity that hosts the subscription.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @param $data
 * It is expecting to receive an associative array where keys will be field
 * (or properties) machine names, and values will be the actual value to be
 * stored in the field/property.
 * Check webpush_topics submodule for an example implementation.
 *
 * @return bool
 */
function webpush_register__create_entity(Minishlink\WebPush\Subscription $subscription, $data) {
  $serialized = serialize($subscription);

  $entity_type = 'webpush_subscription';
  $entity = entity_create($entity_type, [
    'subscription' => $serialized,
    'created' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'),
  ]);
  $entity->save();

  if (is_array($data)) {
    // Give an opportunity to other modules to alter the incoming data before we
    // assign the values to fields.
    drupal_alter('webpush_create_subscription', $data);

    // Just for safety reasons, because the drupal_alter might have unset all
    // the fields.
    if (empty($data)) {
      return $entity;
    }

    try {
      $entity_wrapper = entity_metadata_wrapper('webpush_subscription', $entity);
      foreach ($data as $field => $values) {
        $entity_wrapper->$field->set($values);
      }
      $entity_wrapper->save();
    } catch (EntityMetadataWrapperException $e) {
      watchdog(
        'webpush',
        $e->getMessage() . '<br>See ' . __FUNCTION__ . '():' . __LINE__ . ' <pre>!trace</pre>',
        ['!trace' => $e->getTraceAsString()],
        WATCHDOG_ERROR
      );
      return FALSE;
    }
  }

  return $entity;
}

function webpush_notification__create_entity($title, $body, $link) {
  $entity_type = 'webpush_notification';
  $entity = entity_create($entity_type, [
    'title' => $title,
    'body' => $body,
    'link' => $link,
    'created' => format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s'),
  ]);
  $entity->save();

  return $entity;
}

/**
 * Retrieve the id of the entity that hosts the subscription.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @return bool|int|null|string
 */
function webpush_register__retrieve_entity(Minishlink\WebPush\Subscription $subscription) {
  $serialized = serialize($subscription);

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'webpush_subscription')
    ->propertyCondition('subscription', $serialized)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['webpush_subscription'])) {
    reset($result['webpush_subscription']);
    $id = key($result['webpush_subscription']);
    $entity = entity_load_single('webpush_subscription', [$id]);
    return $entity;
  }
  return FALSE;
}

/**
 * Deletes the webpush_subscription entity that hosts the subscription.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @return bool|int|null|string
 */
function webpush_register__delete_entity(Minishlink\WebPush\Subscription $subscription) {
  $entity = webpush_register__retrieve_entity($subscription);
  list($id, $vid, $bundle) = entity_extract_ids('webpush_subscription', $entity);
  entity_delete('webpush_subscription', $id);
}

/**
 * Returns an array with the IDs of all the webpush_subscription entities.
 *
 * @return array|bool
 */
function webpush_subscription__get_all() {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'webpush_subscription')
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['webpush_subscription'])) {
    return array_keys($result['webpush_subscription']);
  }
  return FALSE;

}


function webpush__send_notification(Minishlink\WebPush\Subscription $subscription, $title, $body, $link) {
  $auth = [
    'VAPID' => [
      'subject' => $title,
      'publicKey' => variable_get('webpush_public_key', ''),
      'privateKey' => variable_get('webpush_private_key', ''),
    ],
  ];

  $payload = [
    'title' => $title,
    'body' => $body,
  ];
  if ($link) {
    $payload['url'] = $link;
  }
  if ($icon = variable_get('webpush_icon_fid', '')) {
    $file = file_load($icon);
    $uri = $file->uri;
    $url = file_create_url($uri);
    $payload['icon'] = $url;
  }
  if ($badge = variable_get('webpush_badge_fid', '')) {
    $file = file_load($icon);
    $uri = $file->uri;
    $url = file_create_url($uri);
    $payload['badge'] = $url;
  }

  // @TODO implement also an "image" (here, and in JS)

  try {
    $webPush = new Minishlink\WebPush\WebPush($auth);
    $result = $webPush->sendNotification(
      $subscription, // @param Subscription $subscription
      json_encode($payload), // @param string|null $payload If you want to send an array, json_encode it
      TRUE // @param bool $flush If you want to flush directly (usually when you send only one notification)
    // @param array $options Array with several options tied to this notification. If not set, will use the default options that you can set in the WebPush object
    // @param array $auth Use this auth details instead of what you provided when creating WebPush
    );
    if (is_array($result) && !$result['success']) {
      _webpush_send_subscription_failure($result, $subscription);
      return FALSE;
    }
    return TRUE;
  } catch (Exception $e) {
    watchdog_exception('webpush', $e);
    return FALSE;
  }
}

function _webpush_send_subscription_failure(array $result, Minishlink\WebPush\Subscription $subscription) {
  switch ($result['statusCode']) {
    case '404':
      // If we end up here the subscription is not valid anymore, so we just
      // delete it.
      $keep_invalid = variable_get('webpush_keep_invalid_subscriptions', FALSE);
      if (!$keep_invalid) {
        webpush_register__delete_entity($subscription);
      }
      break;
    default:
      // @TODO what should be done here?
      break;
  }
}

/**
 * Initiates the notification sending procedure.
 *
 * @param $subscription_id
 * @param $context
 */
function webpush__send_notification_batch_wrapper($subscription_id, &$data, &$context) {
  $title = $data['title'];
  $body = $data['body'];
  $link = $data['link'];

  $wrapper = entity_metadata_wrapper('webpush_subscription', $subscription_id);

  /** @var Minishlink\WebPush\Subscription $subscription */
  $subscription = unserialize($wrapper->subscription->value());
  $sent = webpush__send_notification($subscription, $title, $body, $link);
  if ($sent) {
    if (!isset($context['results']['webpush_success'])) {
      $context['results']['webpush_success'] = 1;
    }
    else {
      $context['results']['webpush_success']++;
    }
  }
  else {
    if (!isset($context['results']['webpush_fail'])) {
      $context['results']['webpush_fail'] = 1;
    }
    else {
      $context['results']['webpush_fail']++;
    }
  }
}


function webpush__send_notification_batch(WebpushNotification $notification_entity) {
  $wrapper = entity_metadata_wrapper('webpush_notification', $notification_entity);
  drupal_set_message('Sending push notification');
  $subscriptions = webpush_subscription__get_all();
  $operations = [];
  foreach ($subscriptions as $subscription_id) {
    $operations[] = [
      'webpush__send_notification_batch_wrapper',
      [
        'subscription_id' => $subscription_id,
        'data' => [
          'title' => $wrapper->title->value(),
          'body' => $wrapper->body->value(),
          'link' => $wrapper->link->value(),
        ],
      ],
    ];
  }
  $batch = [
    'operations' => $operations,
    'finished' => 'webpush__send_notification_batch_finished',
  ];
  return $batch;
}


function webpush__send_notification_batch_finished($success, $results, $operations) {
  if ($success) {
    $total = (int) $results['webpush_success'] + (int) $results['webpush_fail'];
    $success = (int) $results['webpush_success'];
    $fail = (int) $results['webpush_fail'];
    $msg = t('Attempted to send @count push notifications. @success have successfully been sent and @fail have failed.', [
      '@count' => $total,
      '@success' => $success,
      '@fail' => $fail,
    ]);
    drupal_set_message($msg);
    $keep_invalid = variable_get('webpush_keep_invalid_subscriptions', FALSE);
    if (!$keep_invalid) {
      $invalid = t('The subscriptions of the failed notifications have been deleted.');
      drupal_set_message($invalid);
    }
    else {
      $invalid = t('The subscriptions of the failed notifications have not been deleted because your configuration indicates to keep them, but you should consider deleting them.');
      drupal_set_message($invalid, 'warning');
    }
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', [
      '@operation' => $error_operation[0],
      '@args' => print_r($error_operation[0], TRUE),
    ]));
  }
}


/**
 * Implements hook_entity_info().
 */
function webpush_entity_info() {
  module_load_include('inc', 'webpush', 'includes/webpush_subscription');
  $_webpush_subscription_entity_info = _webpush_subscription_entity_info();

  module_load_include('inc', 'webpush', 'includes/webpush_notification');
  $_webpush_notification_entity_info = _webpush_notification_entity_info();

  $info = array_merge($_webpush_subscription_entity_info, $_webpush_notification_entity_info);
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function webpush_entity_property_info() {
  module_load_include('inc', 'webpush', 'includes/webpush_subscription');
  $_webpush_subscription_entity_property_info = _webpush_subscription_entity_property_info();

  module_load_include('inc', 'webpush', 'includes/webpush_notification');
  $_webpush_notification_entity_property_info = _webpush_notification_entity_property_info();

  $info = array_merge($_webpush_subscription_entity_property_info, $_webpush_notification_entity_property_info);
  return $info;
}

/**
 * Access callback for WebPush Subscription drupal entity.
 */
function webpush_subscription_access_callback() {
  return user_access('send push notifications');
}

/**
 * Access callback for WebPush Subscription drupal entity.
 */
function webpush_notification_access_callback() {
  return user_access('send push notifications');
}

function webpush_subscription__count() {
  $query = "SELECT COUNT(id) FROM {webpush_subscription}";
  $total = db_query($query)->fetchField();
  return $total;
}

/**
 * Implementation of hook_views_default_views().
 *
 * @TODO this does not work
 *
 **/
function webpush_views_default_views() {
  $files = file_scan_directory(drupal_get_path('module', 'webpush') . '/views', '.views.inc');
  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }
  return $views;
}

