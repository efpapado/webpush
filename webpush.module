<?php

/**
 * Implements hook_menu().
 */
function webpush_menu() {
  $items = [];

  $items['webpush/serviceworker/js'] = [
    'page callback' => 'webpush_serviceworker_file_data',
    'access arguments' => ['register webpush'],
    'access callback' => TRUE,
    'delivery callback' => 'webpush_deliver_js_file',
    'file' => 'webpush.pages.inc',
    'type' => MENU_CALLBACK,
  ];

  $items['webpush/subscription'] = [
    'type' => MENU_CALLBACK,
    'page callback' => 'webpush_subscription',
    'access arguments' => ['register webpush'],
    'access callback' => TRUE,
  ];

  $items['admin/config/services/webpush'] = [
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Webpush',
    'description' => 'Webpush settings.',
    'access arguments' => ['send push notifications'],
    'file' => 'webpush.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['webpush_admin_send_form'],
  ];

  $items['admin/config/services/webpush/send'] = [
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Send notification',
    'description' => 'Send ush notifications to subscribed users.',
    'weight' => -100,
    'access arguments' => ['send push notifications'],
    'file' => 'webpush.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['webpush_admin_send_form'],
  ];

  $items['admin/config/services/webpush/configure'] = [
    'type' => MENU_LOCAL_TASK,
    'title' => 'Configuration',
    'description' => 'Webpush settings.',
    'access arguments' => ['administer webpush'],
    'file' => 'webpush.admin.inc',
    'weight' => 100,
    'page callback' => 'drupal_get_form',
    'page arguments' => ['webpush_admin_configuration_form'],
  ];

  // Items related to WebPush Subscription entity.
  $items += _webpush_subscription_menu();

  return $items;
}

/**
 * Implements hook_permission().
 */
function webpush_permission() {
  return [
    'register webpush' => [
      'title' => t('Register webpush'),
      'description' => t('Register for receiving push notifications.'),
    ],
    'administer webpush' => [
      'title' => t('Administer webpush'),
      'description' => t('Set configuration options for webpush.'),
    ],
    'send push notifications' => [
      'title' => t('Send push notifications'),
      'description' => t('Allows the user to send push notifications.'),
    ],
  ];

}

function webpush_is_enabled() {
  return variable_get('webpush_public_key', FALSE) && variable_get('webpush_private_key', FALSE);
}

/**
 * Implements hook_preprocess_html().
 */
function webpush_preprocess_html(&$variables) {
  if (!webpush_is_enabled() || !user_access('register webpush')) {
    return;
  }

  // Load the helper script.
  drupal_add_js(drupal_get_path('module', 'webpush') . '/js/sw-load.js', 'file');
  // Load the service worker.
  drupal_add_js(['webpush' => ['path' => url('webpush/serviceworker/js')]], 'setting');
  // Send the public key to js.
  drupal_add_js(['webpush' => ['applicationServerKey' => variable_get('webpush_public_key', FALSE)]], ['type' => 'setting']);
}


/**
 * Implements hook_block_info().
 */
function webpush_block_info() {
  $blocks = [];
  $blocks['webpush_user_panel'] = [
    'info' => t('Webpush user panel'),
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webpush_block_view($delta = '') {
  $block = [];

  switch ($delta) {
    case 'webpush_user_panel' :
      $block['content'] = _webpush_block_build();
      break;
  }

  return $block;
}

function _webpush_block_build() {

  // Capture the image file path and form into HTML with attributes
  //  $image_file = file_load(variable_get('block_image_fid', ''));
  //  $image_path = '';

  //  if (isset($image_file->uri)) {
  //    $image_path = $image_file->uri;
  //  }

  //  $image = theme_image([
  //    'path' => ($image_path),
  //    'alt' => t('Image description here.'),
  //    'title' => t('This is our block image.'),
  //    'attributes' => ['class' => 'class_name'],
  //  ]);

  // Capture WYSIWYG text from the variable
  //  $text = variable_get('text_variable', '');

  // Block output in HTML with div wrapper
  $block = [
    //    'image' => [
    //      '#prefix' => '',
    //      '#type' => 'markup',
    //      '#markup' => $image,
    //    ],
    'message' => [
      '#type' => 'markup',
      '#markup' => '<div id="webpush-subscription-button" style="background-color: yellow; cursor: pointer; color: red; font-size: 28px; padding: 50px; position: fixed; left: 20px; bottom: 50px; z-index: 999;">HERE</div>',
      '#suffix' => '',
    ],
  ];
  return $block;
}

function webpush_subscription() {
  $subscription_input = json_decode(file_get_contents('php://input'), TRUE);
  $subscription = Minishlink\WebPush\Subscription::create([
    'endpoint' => $subscription_input['endpoint'],
    'authToken' => $subscription_input['authToken'],
    'publicKey' => $subscription_input['publicKey'],
    'contentEncoding' => $subscription_input['contentEncoding'],
  ]);


  switch ($_SERVER['REQUEST_METHOD']) {
    case 'POST':
    case 'PUT':
      webpush_register($subscription);
      break;

    case 'DELETE':
      webpush_delete($subscription);
      break;

    default:
      // Error: method not handled.
      return FALSE;
  }

  return TRUE;
}

/**
 * @TODO we need to make it extendable
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @param $options
 *
 * @throws \Exception
 */
function webpush_register(Minishlink\WebPush\Subscription $subscription, $options = []) {
  if (!webpush_register__retrieve_entity($subscription)) {
    webpush_register__create_entity($subscription);
  }
}

/**
 * @TODO this needs to be based on custom entity.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 */
function webpush_delete(Minishlink\WebPush\Subscription $subscription) {
  webpush_register__delete_entity($subscription);
}

/**
 * @TODO this needs to be based on custom entity.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @throws \Exception
 */
function webpush_register__create_entity(Minishlink\WebPush\Subscription $subscription) {
  $serialized = serialize($subscription);

  $node = new stdClass();
  $node->title = rand();
  $node->type = "node_webpush_subscription";
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;
  $node->field_subscription[$node->language][]['value'] = $serialized;
  $node = node_submit($node); // Prepare node for saving
  node_save($node);
}

/**
 * @TODO this needs to be based on custom entity.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @return bool|int|null|string
 */
function webpush_register__retrieve_entity(Minishlink\WebPush\Subscription $subscription) {
  $serialized = serialize($subscription);

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'node_webpush_subscription')
    ->fieldCondition('field_subscription', 'value', $serialized)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['node'])) {
    reset($result['node']);
    return key($result['node']);
  }
  return FALSE;
}

/**
 * @TODO this needs to be based on custom entity.
 *
 * @param \Minishlink\WebPush\Subscription $subscription
 *
 * @return bool|int|null|string
 */
function webpush_register__delete_entity(Minishlink\WebPush\Subscription $subscription) {
  $nid = webpush_register__retrieve_entity($subscription);
  node_delete($nid);
}

function webpush__send_notification($title, $body) {
  $type = "node_webpush_subscription";
  $nodes = node_load_multiple([], ['type' => $type]);
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);

    /** @var Minishlink\WebPush\Subscription $subscription */
    $subscription = unserialize($wrapper->field_subscription->value());

    $auth = [
      'VAPID' => [
        'subject' => $title,
        'publicKey' => variable_get('webpush_public_key', ''),
        'privateKey' => variable_get('webpush_private_key', ''),
      ],
    ];

    $payload = $title; // @TODO check what needs to be here

    try {
      $webPush = new Minishlink\WebPush\WebPush($auth);
      $res = $webPush->sendNotification(
        $subscription, // @param Subscription $subscription
        $payload, // @param string|null $payload If you want to send an array, json_encode it
        TRUE // @param bool $flush If you want to flush directly (usually when you send only one notification)
      // @param array $options Array with several options tied to this notification. If not set, will use the default options that you can set in the WebPush object
      // @param array $auth Use this auth details instead of what you provided when creating WebPush
      );
    } catch (ErrorException $e) {
      // If we end up here, probably the subscription is not valid anymore, so
      // we just delete it.
      $keep_invalid = variable_get('webpush_keep_invalid_subscriptions', FALSE);
      if (!$keep_invalid) {
        webpush_register__delete_entity($subscription);
      }
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function webpush_entity_info() {
  module_load_include('inc', 'webpush', 'includes/webpush_subscription');
  return _webpush_entity_info();
}

/**
 * Implements hook_entity_property_info().
 */
function webpush_entity_property_info() {
  module_load_include('inc', 'webpush', 'includes/webpush_subscription');
  return _webpush_entity_property_info();
}

/**
 * Access callback for WebPush Subscription drupal entity.
 */
function webpush_subscription_access_callback() {
  return user_access('send push notifications');
}

/**
 *  @TODO rename. move to class file, and implement
 */
function webpush_subscription__list() {
  $content[] = [
    '#type' => 'item',
    '#markup' => t('No entity_example_basic entities currently exist.'),
  ];
  return $content;
}
